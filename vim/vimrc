" ##########################################
"               Legacy Vim Settings
" ##########################################
if !has('nvim')
set ttymouse=xterm2

" This setting prevents vim from emulating the original vi's bugs and limitations.
set nocompatible

" Remove Lag
set ttyfast

" Encoding
set encoding=utf-8  " Set file encoding
"set termencoding=utf-8

"This setting ensures that each window contains a statusline that displays the
"current cursor position.
set ruler

"With this nifty option, vim will search for text as you enter it.
set incsearch
"highlight search results
set hlsearch

"enable syntax highlighting
syntax on

" be quiet
set vb t_vb=""

" turn on command line completion wild style
set wildmenu

" always show the status line
set laststatus=2

" we do what to show tabs, to ensure we get them  out of my files
set list
" show tabs and trailing
set listchars=tab:>-,trail:-

" show the command being typed
set showcmd

" make backspace always work
set backspace=indent,eol,start

endif


" ##########################################
"               Neo Vim Settings
" ##########################################
if has('nvim')
  set termguicolors
endif

" ##########################################
"               General Settings
" ##########################################

"The first setting tells vim to use 'autoindent' (that is, use the current
"line's indent level to set the indent level of new lines). The second makes
"vim attempt to intelligently guess the indent level of any new line based on
"the previous line, assuming the source file is in a C-like language.
"Combined, they are very useful in writing well-formatted source code.
set autoindent
set smartindent

"Use 4-space tabs. The first setting sets up 4-space
"tabs, and the second tells vi to use 4 spaces when text is indented
set tabstop=4
set shiftwidth=4 "indent width for autoindent
set expandtab " no real tabs please, turn tabs into whitespace
set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
set softtabstop=4 " when hitting tab or backspace, how many spaces should a tab be (see expandtab)
filetype plugin indent on "indent depends on filetype

"ignore whitespace in vimdiff
if &diff
    " diff mode
    set diffopt-=internal
    set diffopt+=iwhite
endif

" show matching brackets
set showmatch

"ignore search case with all lowercase, use case when all uppercase
set ignorecase
set smartcase

"syntax stuff
syntax sync fromstart "increases syntax accuracy

"STFU
set noerrorbells

" use mouse everywhere
set mouse=a

"ignore these list file extensions
set wildignore=*.dll,*.o,*.obj,*.exe,*.pyc,*.jpg,*.gif,*.png,*.class,*.ln
set wildmode=list:longest " turn on wild mode huge list

"Keep the cursor n lines from the top and bottom
set scrolloff=2
set sidescrolloff=4 " Keep n lines at the side

"show line numbers
set number

" Show number of lines changed by : commands
set report=0

" do not wrap line
"set nowrap
"if we do ever decide to wrap display a nice wrap image
let &showbreak='â†³ '
" use softwrap
set linebreak
"set nolist  " list disables linebreak

"statusline
"replaced by vim-powerline plugin
"set statusline=%F%m%r%h%w\ [%Y,%{&ff}]\ [%l/%L,%c][%p%%]

"Highlight current line
set cursorline

" toggle paste mode
set pastetoggle=<F2>

" Change directory to the current buffer when opening files.
set autochdir

" toggle spellcheck
map <F7> :setlocal spell! spelllang=en_us<CR>
"imap <F7> <C-o>:setlocal spell! spelllang=en_us<CR>
imap <F7> ea<C-X><C-S>
nnoremap \s ea<C-X><C-S>

" make up/down work in warp-mode
nnoremap <Up> gk
nnoremap <Down> gj
" TODO make insert mode work
imap <silent> <Up> <C-o>gk
imap <silent> <Down> <C-o>gj

" auto close brackets, etc...
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O

" ##########################################
"               Plugin Code
" ##########################################

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'preservim/nerdtree'
Plugin 'powerline/powerline'
Plugin 'sickill/vim-monokai'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"powerline statusbar
"let g:Powerline_symbols = 'fancy' "does not work with vim-tiny

" key used to launch nerdtree
map <C-d> :NERDTreeToggle<CR>
map <F6> :NERDTreeToggle<CR>
" have nerdtree open when vim started with no file
autocmd vimenter * if !argc() | NERDTree | endif
" close nerdtree if it is the last window open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" have nerdtree ignore certian file types
let NERDTreeIgnore=['\.o$', '\~$', '\.ln', '\.class', '\.pyc']

"color scheme
try
    colorscheme monokai
catch /^Vim\%((\a\+)\)\=:E185/
    " deal with it
endtry
let g:rehash256 = 1

" ##########################################
"               make netrw like NerdTree
" ##########################################

let g:NetrwIsOpen=0
function! ToggleNetrw()
    if g:NetrwIsOpen
        let i = bufnr("$")
        while (i >= 1)
            if (getbufvar(i, "&filetype") == "netrw")
                silent exe "bwipeout " . i
            endif
            let i-=1
        endwhile
        let g:NetrwIsOpen=0
    else
        let g:NetrwIsOpen=1
        silent Lexplore
    endif
endfunction

noremap <silent> <C-E> :call ToggleNetrw()<CR>

" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
autocmd FileType netrw setl bufhidden=delete

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
" use the previous window to open file
let g:netrw_browse_split = 4

let g:netrw_altv = 1

" absolute width of netrw window
let g:netrw_winsize = -30

" do not display info on the top of window
let g:netrw_banner = 0

" tree-view
let g:netrw_liststyle = 3

" sort is affecting only: directories on the top, files below
"let g:netrw_sort_sequence = '[\/]$,*'

" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
"autocmd FileType netrw setl bufhidden=delete

" auto close if netrw is the only pane left
aug netrw_close
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "netrw"|q|endif
aug END

" remap control-enter to open files in new tab
"nmap <silent> <C-CR> t :rightbelow 20vs<CR>:e .<CR>:wincmd h<CR>

" ##########################################
"               Filetype specific bits
" ##########################################

"go
au BufReadPost *.go set filetype=go
" use tabs in go
autocmd FileType go setlocal noexpandtab

"enable wrappin in tex
augroup WrapLineInTeXFile
    autocmd!
    autocmd FileType tex setlocal wrap
augroup END

"enable wrappin in tex
augroup WrapLineInMdFile
    autocmd!
    autocmd FileType md setlocal wrap
augroup END

"allow tabs on makefiles
autocmd FileType make setlocal noexpandtab

" two spaces for yaml indentations
autocmd FileType yaml,yml setlocal ts=2 sts=2 sw=2 expandtab

" ##########################################
"               Testing
" ##########################################

"fix arrow key problem with indent plugin
set ttimeout
set ttimeoutlen=100
