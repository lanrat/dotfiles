#!/usr/bin/env bash

docker_cli_plugin_metadata() {
	local vendor="lanrat"
	local description="copy volume from old_name to existing new_name"
	cat <<-EOF
	{"SchemaVersion":"0.1.0","Vendor":"${vendor}","ShortDescription":"${description}"}
EOF
}

docker-volumecpinto() {
    if [ ! $# -eq 2 ]
    then
        echo "Usage: $(basename "$0") existing_source_volume existing_target_volume"
        exit
    fi

    if ! docker volume ls -q | grep -q "^$1\$"; then
        echo "volume $1 does not exist!"
        exit 1
    fi

	if ! docker volume ls -q | grep -q "^$2\$"; then
        echo "volume $2 does not exist!"
        exit 1
    fi

	if [ "$1" = "$2" ]; then
		echo "source and destination volums must be different"
		return 2
	fi

	read -p "WARNING: Volume $2 will be overridden. Are you sure? " -n 1 -r
	echo    # (optional) move to a new line
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "canceled"
		return 2
	fi


    echo "Emptying $2"
    docker run --rm -it -v "$2:/new" bash find /new -mindepth 1 -delete
    echo "Copying $1 -> $2"
    docker run --rm -it -v "$1:/old/:ro" -v "$2:/new" bash cp -drp /old/. /new
}

## TODO use completion functions here
# https://github.com/docker/cli/pull/4094
# https://github.com/docker/cli/blob/master/contrib/completion/bash/docker


# docker completions
_complete_docker_volumes () {
	COMPREPLY=()
	#cur="${COMP_WORDS[COMP_CWORD]}"
	cur="$1"
	comp_docker_volumes="$(docker volume ls -q)"
	COMPREPLY=( $(compgen -W "${comp_docker_volumes}" -- "$cur"))
	if [ "${#COMPREPLY}" -gt "0" ]; then
    	echo "${COMPREPLY[*]}"
	else
		echo " " # space terminated the completion
	fi
	return 0
}


case "$1" in
	docker-cli-plugin-metadata)
		docker_cli_plugin_metadata
		;;
	__completeNoDesc)
		arg=("${@:2}")
		_complete_docker_volumes "${arg[*]}"
		;;
	*)
        docker-volumecpinto "${@:2}"
		;;
esac
