#!/usr/bin/env bash

docker_cli_plugin_metadata() {
    local vendor="lanrat"
    local description="backup volume from existing volume to backup_dir"
    cat <<-EOF
    {"SchemaVersion":"0.1.0","Vendor":"${vendor}","ShortDescription":"${description}"}
EOF
}

usage() {
    echo "Usage: docker volumebackup <volume> <backup_dir>"
    echo ""
    echo "Backup a Docker volume to a directory as a compressed tar file."
    echo ""
    echo "Arguments:"
    echo "  volume       Name of the volume to backup"
    echo "  backup_dir   Directory where backup files will be stored"
}

docker-volumebackup() {
    if [ ! $# -eq 2 ]
    then
        usage
        exit 1
    fi

    if ! docker volume ls -q | grep -q "^$1\$"; then
        echo "volume $1 does not exist!"
        exit 1
    fi


    if [ -f "$2" ]; then
        echo "backup file $2 exists!"
        exit 1
    fi

    full_backup_path="$(realpath "$2")"
    echo "Backing up $1 -> $full_backup_path/$1.tgz"
    mkdir -p "$full_backup_path"
    docker volume inspect "$1" > "$full_backup_path/$1.json"
    docker run --name "docker-volume-backup-$1" --rm -v "$1:/data:ro" -v "$full_backup_path:/backup" bash tar -czf "/backup/$1.tgz" -C /data .
}

case "$1" in
    docker-cli-plugin-metadata)
        docker_cli_plugin_metadata
        ;;
    __complete)
        # Check how many arguments we have to determine what to complete
        # $1=volumebackup, $2=first_arg, $3=second_arg, etc.
        if [[ ${#@} -le 3 ]]; then
            # Completing first argument - show volume names
            docker volume ls -q | grep -v "^$"
        else
            # Completing second argument (backup_dir) - allow file completion fallback
            # Return nothing to enable bash file/directory completion
            :
        fi
        ;;
    *)
        # Check if second argument is help flag
        if [[ "$2" == "--help" || "$2" == "-h" ]]; then
            usage
        else
            docker-volumebackup "${@:2}"
        fi
        ;;
esac
