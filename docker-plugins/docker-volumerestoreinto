#!/usr/bin/env bash

docker_cli_plugin_metadata() {
	local vendor="lanrat"
	local description="copy volume from backup_file to existing volume new_name"
	cat <<-EOF
	{"SchemaVersion":"0.1.0","Vendor":"${vendor}","ShortDescription":"${description}"}
EOF
}

usage() {
	echo "Usage: docker volumerestoreinto <backup_file> <target_volume>"
	echo ""
	echo "Restore a volume backup to an existing Docker volume (destructive)."
	echo ""
	echo "Arguments:"
	echo "  backup_file      Path to the backup tar.gz file"
	echo "  target_volume    Name of the existing target volume (will be overwritten)"
}

docker-volumerestoreinto() {
    if [ ! $# -eq 2 ]
    then
        usage
        exit 1
    fi

	if [ ! -f "$1" ]; then
		echo "backup file $1 does not exist!"
		exit 1
	fi

	if ! docker volume ls -q | grep -q "^$2\$"; then
        echo "volume $2 does not exist!"
        exit 1
    fi

	read -p "WARNING: Volume $2 will be overridden. Are you sure? " -n 1 -r
	echo    # (optional) move to a new line
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "canceled"
		exit 2
	fi


    echo "Emptying $2"
    docker run --rm -it -v "$2:/new" bash find /new -mindepth 1 -delete
    echo "Restoring $1 -> $2"
	full_backup_path="$(realpath "$1")"
    docker run --rm -it -v "$full_backup_path:/backup.tgz:ro" -v "$2:/new" bash tar -xzf /backup.tgz -C /new/
}

case "$1" in
	docker-cli-plugin-metadata)
		docker_cli_plugin_metadata
		;;
	__complete)
		# Check how many arguments we have to determine what to complete
		# $1=volumerestoreinto, $2=first_arg, $3=second_arg, etc.
		if [[ ${#@} -le 3 ]]; then
			# Completing first argument (backup_file) - allow file completion fallback
			# Return nothing to enable bash file completion
			:
		else
			# Completing second argument (target_volume) - show volume names
			docker volume ls -q | grep -v "^$"
		fi
		;;
	*)
		# Check if second argument is help flag
		if [[ "$2" == "--help" || "$2" == "-h" ]]; then
			usage
		else
			docker-volumerestoreinto "${@:2}"
		fi
		;;
esac
