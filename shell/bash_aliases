# -------------------
# Aliases
# -------------------
# shellcheck shell=bash

# given a defined alias, get the command (argv[0])
function aliascmd {
  local a="$(alias "$1")"
  local arr=(${a//\'/ })
  echo "${arr[2]}"
}

# Wraps a completion function, eg for use with an alias.
# based on: https://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases
# Usage:
# make-completion-wrapper <actual completion function> <command name> <list supplied arguments>
# eg.
#   alias agi='apt-get install'
#   make-completion-wrapper _apt_get apt-get install
#     # defines a function called _apt_get_install (that's $2) that will
#     # complete the 'agi' alias.
# to get the default complete function name for an existing command, run:
#     complete -p <command>
function completion-wrapper {
  local function_name="_$2"
  local arg_count=$(( $#-2 ))
  local comp_function_name="$1"
  shift 1
  # for lazy loading, if $comp_function_name is not defined and __load_completion is defined, call it to load the function
  local function="function $function_name {
      [[ \$(type -t \"$comp_function_name\") != function ]] && [[ \$(type -t __load_completion) == function ]] && __load_completion \"\$(aliascmd $1)\"
      (( COMP_CWORD += $arg_count ))
      COMP_WORDS=( \"\$@\" \${COMP_WORDS[@]:1} )
      \"$comp_function_name\"
    }"
  #echo "$function"
  eval "$function"
  complete -F "$comp_function_name-exit" "$1"
}

# This allows sudo to work with aliases
alias sudo='sudo '

# does what it should
alias untar="tar -xf"

# easier ssh-exists
alias ssh-exit="ssh -O exit"
completion-wrapper _ssh ssh-exit

# make grep use color
# DEPRECATED: export GREP_OPTIONS="--color=auto"
alias grep='grep --color=auto'

# search code faster
function cgrep
{
  if [ "$#" -eq 0 ]; then
    echo "usage: cgrep 'pattern' [path]..."
    return 1
  fi
  args=("$@")
  if [ "$#" -eq 1 ]; then
    # add . to empty search path
    args+=(".")
  fi
  f="RIn"
  if [[ ! "$1" =~ [A-Z] ]]; then
    # only lowercase searched, case-insensitive
    f="${f}i"
  fi
  grep --exclude-dir=.git -$f "${args[@]}"
}

# allow running unsigned binary on macOS
if [ "$(uname)" = "Darwin" ]; then
    alias unquarantine='xattr -d com.apple.quarantine'
fi

# ls aliases
if [ "$(uname)" = "Darwin" ]; then
    alias ls='ls -G'
else
    alias ls='ls --color=auto'
fi

# print dd status
alias dd-status='pkill -USR1 ^dd'


# netstat the way I like it
#alias ports='netstat -tupl --numeric-ports | grep -E ":[0-9]+\s"'
#alias portse='netstat -tup --numeric-ports | grep -E ":[0-9]+\s"'
#alias lsports='sudo lsof -PiTCP -sTCP:LISTEN'
alias ports='ss -lnptua'

if [[ "$(uname)" = 'Linux' ]]; then
    # dmesg with readable time
    alias dmesg='dmesg -T'

    # faster opens
    alias o='gnome-open'
fi

# I use du -sh way to much
alias s="du -sh"

# force mtr to text mode
alias mtr='mtr -t'

# faster opens
alias o='xdg-open'

# get my ip
alias myip='curl icanhazip.com'

# clear color ip info
alias ipa='ip -c -br a'
alias ipr='(ip -c -br r; ip -c -br -6 r)'

# incognito
alias incogterm='unset HISTFILE'

# fix htop inside tmux
alias htop="TERM=screen htop"

# htop for only current user
alias utop='htop -u $USER'

alias csort="LC_COLLATE=C sort"

# faster tmux resume
if type "tmx2" 2>/dev/null >/dev/null; then
  alias tmux="tmx2"
fi
alias t="tmux"
alias ta="tmux a"

alias sn="subl -n ."

# send myself email notifications
if type "sendgmr" > /dev/null 2>&1; then
    alias pong="sendgmr --subject='PONG' --to=\$USER"
else
    alias pong="mail -s PONG \$USER"
fi

# wget with filename from header
alias wgetc="wget --continue --content-disposition"

# upload command output to clbin
alias clbin="curl -F 'clbin=<-' https://clbin.com"

# cleaner docker ps
alias dps="docker ps -a --format \"table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Image}}\""

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# python 1 line web server
alias py-serv='python3 -m http.server 8006'

# does the internet work?
alias p1="ping 1.1.1.1"
alias p6="ping6 2606:4700:4700::1111"

[[ -s "/Applications/Tailscale.app/Contents/MacOS/Tailscale" ]] && alias tailscale="/Applications/Tailscale.app/Contents/MacOS/Tailscale"

# TODO code or code-server?
alias code-server="code-server -e"

# gedit alias
if command -v gnome-text-editor &>/dev/null && [ "$(uname)" = "Linux" ]
then
    alias gedit="gnome-text-editor"
fi

# update go using godeb
alias godeb-update='godeb install "$(godeb list | sort -Vr | grep -v rc | head -1)"'

# fucntion to use our ssh-copy-id if ssh-copy-id does not exist
function ssh-copy-id
{
    if command -v ssh-copy-id &> /dev/null; then
        command ssh-copy-id "$@"
        return $?
    fi
    ssh-copy-id-lite "$@"
    return $?
}

# helper for creating new shell scripts
function mkscript
{
  if [ "$#" -ne 1 ]; then
    echo "usage: ${FUNCNAME[0]} filename"
    return 1
  fi
  if [ -f "$1" ]; then
    echo "$1 exists."
    return 1
  fi
  touch "$1"
  chmod +x "$1"
  cat <<EOF > "$1"
#!/usr/bin/env bash
set -eu
set -o pipefail
if [[ "\${TRACE-0}" == "1" ]]; then set -o xtrace; fi
SCRIPT_DIR=\$( cd -- "\$( dirname -- "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

EOF
  echo "created $1"
}

# esphome using a device instead of mdns
function esphomed
{
  # find filename
  file="$(echo "$@" | grep -oP "[\w-]+.ya?ml\W*")"
  host="${file%.*}"
  # get name from file?
  # esphome config sonoff-plug-1b32a1.yaml 2>/dev/null | grep node_name: | cut -d : -f2 | tr -d ' '
  echo "using device: $host"
  esphome $@ "--device=$host"
}

# pgrep with additional information
# source: https://serverfault.com/questions/77162/how-to-get-pgrep-to-display-full-process-info
function ppgrep() { pgrep "$@" | xargs --no-run-if-empty ps fp; }


# don't completion-wrapper
unset -f completion-wrapper

# create or enter python virtualenv
alias py-venv='if [ ! -f .venv/bin/activate ]; then python3 -m venv .venv; fi && source .venv/bin/activate'

