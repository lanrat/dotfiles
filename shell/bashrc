# -----------
# .bashrc
# bashrc is executed for interactive non-login shells (gui-terminal, bash)
# -----------
# profiling: https://stackoverflow.com/questions/5014823/how-to-profile-a-bash-shell-script-slow-startup
# shellcheck shell=bash

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# fix Ctrl-S freezing terminal (Ctrl-Q to resume)
stty -ixon

# -------------------
# Default Apps
# -------------------

export PAGER='less'
export EDITOR='vim'
export P4DIFF='colordiff -u'


# -------------------
# App Settings
# -------------------

#enable color, case-insensitive search, and no-wrapping in less
# -FX exit if all data fits in term
export LESS="-SiRFXn"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Alias definitions.
# shellcheck source=/dev/null
if [ -f ~/.bash_aliases ];
then
    . ~/.bash_aliases
fi


# -----------
# Colors
# -----------

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    *color) color_prompt=yes;;
esac


# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
      # We have color support; assume it's compliant with Ecma-48
      # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
      # a case would tend to support setf rather than setaf.)
      color_prompt=yes
    else
      color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    reset_c='\e[0m'
    path_c='\e[0;36m'         # Cyan
    host_c='\e[0;32m'         # Green
    user_c='\e[0;34m'         # Blue
    gray_c='\e[1;30m'
    red_c='\e[0;31m'
    p='\$'
    if [[ $EUID -eq 0 ]];
    then
        p='#'
        user_c=$red_c # root user is red
    fi
    PS1="\[$user_c\]\u\[$gray_c\]@\[$host_c\]\h\[$gray_c\]:\[$path_c\]\w\$(EXIT=\$?; if [ \$EXIT != 0 ]; then echo -en \[\e[0\;31m\][\$EXIT]\[$reset_c\]; fi;)\[$gray_c\]$p\[$reset_c\] "
    PS2="\[$path_c\]>\[$reset_c\] "
    unset reset_c user_c host_c path_c
else
    PS1='\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

if [ "$TERM" = "xterm" ]; then
    export TERM=xterm-256color
fi

# enable color support
if [ -x /usr/bin/dircolors ]; then
  if [ -r ~/.dircolors ]; then
    eval "$(dircolors -b ~/.dircolors)"
  else
    eval "$(dircolors -b)"
  fi
fi

# limit length of PS directory
export PROMPT_DIRTRIM=3

# Less Colors for Man Pages
man()
{
    # begin blinking
    # begin bold
    # end mode
    # end standout-mode
    # begin standout-mode - info box & search results
    # end underline
    # begin underline
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[7;49;35m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}

# -----------
# History
# -----------

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000


# -------------------
# Bash Completion on steroids
# -------------------

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
# shellcheck source=/dev/null
if ! shopt -oq posix; then
  if [ -r "/usr/share/bash-completion/bash_completion" ]; then
    . "/usr/share/bash-completion/bash_completion"
  fi
  if [ -r "/etc/bash_completion" ]; then
    . "/etc/bash_completion"
  fi
  # bash completeion for brew on OSX
  if type brew &>/dev/null; then
    HOMEBREW_PREFIX="$(brew --prefix)"
    if [ -r "${HOMEBREW_PREFIX}/etc/bash_completion" ]; then
      source "${HOMEBREW_PREFIX}/etc/bash_completion"
    fi
    if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
      source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
    else
      for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
        [[ -r "$COMPLETION" ]] && source "$COMPLETION"
      done
    fi
  fi
fi


# -------------------
# Other
# -------------------

#Extracts archives correctly. No more memorizing evil tar.
extract () {
  if [ -f "$1" ] ; then
      case "$1" in
          *.tar.bz2)   tar xvjf "$1"    ;;
          *.tar.gz)    tar xvzf "$1"    ;;
          *.xz)        xz --decompress "$1" ;;
          *.bz2)       bunzip2 "$1"     ;;
          *.rar)       rar x "$1"       ;;
          *.gz)        gunzip "$1"      ;;
          *.tar)       tar xvf "$1"     ;;
          *.tbz2)      tar xvjf "$1"    ;;
          *.tgz)       tar xvzf "$1"    ;;
          *.zip)       unzip -d "${1%*.zip}" "$1"       ;;
          *.apk)       unzip -d "${1%*.apk}" "$1"       ;;
          *.Z)         uncompress "$1"  ;;
          *.7z)        7z x "$1"        ;;
          *.lz4)       lz4 -d "$1"      ;;
          *.deb)       dpkg -X "$1" "$(basename "${1%.*}")"     ;;
          *.rpm)       rpm2cpio "$1" | cpio -idmv -D "$(basename "${1%.*}")" || tar -xvzf "$1" ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# github checkout pr
ghpr () {
  if [ "$#" -ne 1 ]; then
    echo "usage: ghpr PR_ID"
  else
    git fetch origin "pull/$1/head:pr-$1" && echo "created new branch pr-$1"
  fi
}

# Simple calculator
function calc() {
        local result=""
        result="$(printf "scale=10;%s\n" "$*" | bc --mathlib | tr -d '\\\n')"
        #                       └─ default (when `--mathlib` is used) is 20
        #
        if [[ "$result" == *.* ]]; then
                # improve the output for decimal numbers
                printf "%s" "$result" |
                sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
                    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
                    -e 's/0*$//;s/\.$//'   # remove trailing zeros
        else
                printf "%s" "$result"
        fi
        printf "\n"
}

# Include local machine specific settings
# shellcheck source=/dev/null
if [ -f ~/.bashrc_local ];
then
    . ~/.bashrc_local
fi

[[ -s "$HOME/go/bin" ]] && export PATH="${PATH}:${HOME}/go/bin"
[[ -s "$HOME/.local/bin" ]] && export PATH="${PATH}:${HOME}/.local/bin"


# let postgresql use colors
export PG_COLOR=auto

# disable docker Snyk
export DOCKER_SCAN_SUGGEST=false

# _complete_ssh_hosts ()
# {
#         COMPREPLY=()
#         cur="${COMP_WORDS[COMP_CWORD]}"
#         comp_ssh_hosts=$(cut -f 1 -d ' ' < ~/.ssh/known_hosts | \
#                          sed -e s/,.*//g | \
#                          grep -v ^\# | \
#                          uniq | \
#                          grep -v "\[" ;
#                          grep -i --color=never "^Host " < ~/.ssh/known_hosts | \
#                          awk '{print $2}'
#                    )
#         COMPREPLY=( $(compgen -W "${comp_ssh_hosts}" -- "$cur"))
#         return 0
# }
#complete -F _complete_ssh_hosts ssh

true # this ensures the bashrc always has a 0 exit code
